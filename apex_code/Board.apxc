public class Board {
    @TestVisible
    private Integer boxes;
    @TestVisible
    private Dice dice;
    //lists
    @TestVisible
    private List<Snake> snakes;
    @TestVisible
    private List<Stair> stairs;
    
    public Board() {
        this.boxes = 25;
        this.dice = new Dice();
        this.snakes = new List<Snake>();
        this.stairs = new List<Stair>();
    }
    
    public Board(Integer boxes) {
        this.boxes = boxes;
        this.dice = new Dice();
        this.snakes = new List<Snake>();
        this.stairs = new List<Stair>();
    }
    
    public void putSnake(Snake snake){
        if (snake.head > this.boxes) {
            CalloutException e = new CalloutException();
            e.setMessage('La serpiente debe iniciar máximo en la casilla ' + this.boxes);
            throw e;
        }
        this.snakes.add(snake);
    }
    
    public void putStair(Stair stair) {
        if (stair.finish > this.boxes) {
            CalloutException e = new CalloutException();
            e.setMessage('La escalera debe terminar máximo en la casilla ' + this.boxes);
            throw e;
        }
        this.stairs.add(stair);
    }
    
    public Boolean playTurn(Player player) {
        system.debug(player.name + ' tira el dado...');
        Integer steps = dice.roll();
        Integer rest = this.boxes - player.position;
        
        if (steps > rest) {
            Integer back = steps - rest;
            system.debug(player.name + ' se ha pasado de la meta, retrocederá ' + back + ' casillas');
            player.move(rest - back);
        } else {
             player.move(steps);       
        }
        
        return validations(player);
    }
    
    @TestVisible
    private Boolean validations(Player player) {
        // stair validation
        stairValidation(player);
        // snake validation
        snakeValidation(player);
        // winning validation
        if (player.position >= this.boxes) {
            system.debug(player.name + ' llegó a la casilla ' + this.boxes + ', ' + player.name + 'ha ganado!!');
            return true;
        }
        return false;
    }
    
    @TestVisible
    private void stairValidation(Player player) {
        for(Stair stair: stairs) {
            if (stair.start == player.position) {
                system.debug(player.name + ' cayó en una escalera que le lleva a la casilla ' + stair.finish);
                player.moveTo(stair.finish);
                validations(player);
                return;
            }
        }
    }
    
    @TestVisible
    private void snakeValidation(Player player) {
        for(Snake snake: snakes) {
            if (snake.head == player.position) {
                system.debug(player.name + ' cayó en una serpiente que le lleva a la casilla ' + snake.tail);
                player.moveTo(snake.tail);
                validations(player);
                return;
            }
        }
    }
}